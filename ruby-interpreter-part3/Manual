Class Overview -----------------------------------------------------------------
The TokenKernal implements all the logic needed to do the finite state machine
switching, the logic to start the finite state machine and the logic
needed for test cases and the like. In this way the Tokenizer could just
implement a number of states that are needed for the functionality of our
tokenizer and also how those states switch between one another.

Each rewrite rule in the core language has one class. Each class provides an
initialization method that parses the rewrite rule based on the input stream of
tokens. In addition these initialization methods calls the initialization methods
of its children rewrite rules. In a few cases a look ahead of a single token was
required to determine which rewrite rule to call. These cases were few and far 
between because the core languages makes som simplifications to cut down on how
far ahead you have to look.

Implementation Method ----------------------------------------------------------
Eventually the recursive descent gets down to terminal symbols, whose values are
either disgarded because it is uneeded information or they are stored as
instance variables. The children rewrite rules are also stored as instance
variables.

Each class also provides a print method that will print its terminal symbols,
and in turn call the corrosponding print methods of its children, passing along
a indention count to know how much it needs indented, if applicable.

Some classes provides an execute method which executes the program, which in
turn will often call its childrens execute methods, unless its children don't
need executed, and often this means that instead of executing its children's
type or value methods are accessed for information.

In this way you can initialize a Program class with an input stream of tokens and
a program data input file. Calling print will print hte program and calling
execute will execute the program. The simplicity of this can be seen in 
interpreter.rb


Test Method --------------------------------------------------------------------
Each test case in test_cases/ will be ran by the test_driver.rb script, it will
run the input program with the input data and then compare the results using a
diff. Further Explination is in the README

Colors -------------------------------------------------------------------------
The test driver outputs blue test descriptions, any white text outputed is from
a diff on the actual test results and expected test results.
